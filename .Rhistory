mutate(pct_endorsed_child = child/(child+not_child)) %>%
mutate(across(everything(), ~ replace(., is.nan(.), NA))) %>%
select(stimulusitem1, pct_endorsed_child) %>%
rename(image_name = stimulusitem1)
face_info <- read.csv(file.choose()) %>%
## Set path
path <- "/Users/bellamoger/Documents/SPARK/"
## Load in
face_info <- read.csv(paste0(path, "demographics_real.csv"))
select(image_name, gender, race, age_group, age_rating,
contains("ISSUES")) %>%
rename(type = race)
select(image_name, gender, race, age_group, age_rating,
contains("ISSUES")) %>%
rename(type = race)
## Load in
stimuli <- read.csv(paste0(path, "stimuli_051224.csv"))
View(stimuli)
## Load in
stimuli <- read.csv(paste0(path, "stimuli_051224.csv"))
select(image_type, gender, race, age_group, age_rating,
contains("ISSUES")) %>%
rename(type = race)
## Load additional face info
face_info <- read.csv("/Users/bellamoger/Documents/SPARK/demographics_real.csv") %>%
select(image_name, gender, race, age_group, age_rating, used_in_study, contains("ISSUES")) %>%
rename(type = race)
## Load additional face info
face_info <- read.csv("/Users/bellamoger/Documents/SPARK/demographics_real.csv") %>%
select(image_name, gender, race, age_group, age_rating, contains("ISSUES")) %>%
rename(type = race)
## Make list of dataframes
data_frames <- list(rating_counts, general_counts, highconfidence_counts, subsethighconfidence_counts)
## Join, make new variable, and reorder
stimuli <- reduce(data_frames, full_join, by = "image_name") %>%
left_join(face_info, by = "image_name") %>%
mutate(image_type = paste(gender, type, sep = "_")) %>%
select(image_name, image_type, gender, type, everything())
## Set path
path <- "/Users/bellamoger/Documents/SPARK/stimuli_051224.csv/"
## Load in
stimuli <- read.csv(paste0(path, "stimuli_051224.csv"))
## Set path
path <- "/Users/bellamoger/Documents/SPARK/"
## Load in
stimuli <- read.csv(paste0(path, "stimuli_051224.csv"))
## Set path
path <- "/Users/bellamoger/Documents/SPARK/"
## Load in
stimuli <- read.csv(paste0(path, "stimuli_051224.csv"))
# look at distributions
stimuli.work %>%
ggplot()+
geom_density(aes(x = pct_endorsed_child, color = "pct_endorsed_child", fill = "pct_endorsed_child"),
alpha = 0.1, na.rm = TRUE) +
labs(x = "Value", y = "Density", title = "Percent Endorsed") +
theme_classic()
## Set path
path <- "/Users/bellamoger/Documents/SPARK/"
## Load in
stimuli.work <- read.csv(paste0(path, "stimuli_051224.csv"))
# look at distributions
stimuli.work %>%
ggplot()+
geom_density(aes(x = pct_endorsed_child, color = "pct_endorsed_child", fill = "pct_endorsed_child"),
alpha = 0.1, na.rm = TRUE) +
labs(x = "Value", y = "Density", title = "Percent Endorsed") +
theme_classic()
## Distribution of different d' memorability scores accross all images
stimuli.work %>%
ggplot()+
geom_density(aes(x = general_dprime,
color = "general_dprime", fill = "general_dprime"),
alpha = 0.1, na.rm = TRUE) +
geom_density(aes(x = highconfidence_treshold_dprime,
color = "highconfidence_treshold_dprime", fill = "highconfidence_treshold_dprime"),
alpha = 0.1, na.rm = TRUE) +
geom_density(aes(x = highconfidence_subset_dprime,
color = "highconfidence_subset_dprime", fill = "highconfidence_subset_dprime"),
alpha = 0.1, na.rm = TRUE) +
labs(x = "d'", y = "Density", title = "Memorability (d')") +
theme_classic()
dprime_list <- c("general_dprime", "highconfidence_treshold_dprime", "highconfidence_subset_dprime")
## Distribution of memorability scores across genders
#for (variable in dprime_list) {
#  plot <- stimuli %>%
#    ggplot(aes(x=!!sym(variable), fill=gender)) +
#    geom_density(alpha=0.2)+
#    theme_classic()
#  print(plot)
## Filter: keep anything where difference from mean does not exceed 2 SDs
contenders <- stimuli.work %>%
filter(general_dprime > 0) %>%  ## NEW
filter(abs(general_dprime - mean(general_dprime)) <= 2 * sd(general_dprime),
abs(highconfidence_treshold_dprime - mean(highconfidence_treshold_dprime)) <= 2 * sd(highconfidence_treshold_dprime),
abs(highconfidence_subset_dprime - mean(highconfidence_subset_dprime)) <= 2 * sd(highconfidence_subset_dprime))
## How many of each are left?
table(contenders$door_or_face)
sort(table(contenders$image_type), decreasing = TRUE)
## This group has a wide range of child endorsement (mean __ endorse child)
summary(contenders$pct_endorsed_child)
## How many of each color door?
contenders %>%
filter(door_or_face == "face") %>%
group_by(type) %>%
summarise(n = n()) %>%
arrange(-n) %>% View()
## Filter: keep anything where difference from mean does not exceed 2 SDs
contenders <- stimuli.work %>%
filter(general_dprime > 0) %>%  ## NEW
filter(abs(general_dprime - mean(general_dprime)) <= 2 * sd(general_dprime),
abs(highconfidence_treshold_dprime - mean(highconfidence_treshold_dprime)) <= 2 * sd(highconfidence_treshold_dprime),
abs(highconfidence_subset_dprime - mean(highconfidence_subset_dprime)) <= 2 * sd(highconfidence_subset_dprime))
## How many of each are left?
table(contenders$door_or_face)
sort(table(contenders$image_type), decreasing = TRUE)
## This group has a wide range of child endorsement (mean __ endorse child)
summary(contenders$pct_endorsed_child)
## How many of each color door?
contenders %>%
filter(door_or_face == "face") %>%
group_by(type) %>%
summarise(n = n()) %>%
arrange(-n) %>% View()
View(stimuli.work)
dprime_list <- c("general_dprime", "highconfidence_treshold_dprime", "highconfidence_subset_dprime")
## Distribution of memorability scores across genders
#for (variable in dprime_list) {
#  plot <- stimuli %>%
#    ggplot(aes(x=!!sym(variable), fill=gender)) +
#    geom_density(alpha=0.2)+
#    theme_classic()
#  print(plot)
## Filter: keep anything where difference from mean does not exceed 2 SDs
contenders <- stimuli.work %>%
filter(general_dprime > 0) %>%  ## NEW
filter(abs(general_dprime - mean(general_dprime)) <= 2 * sd(general_dprime),
abs(highconfidence_treshold_dprime - mean(highconfidence_treshold_dprime)) <= 2 * sd(highconfidence_treshold_dprime),
abs(highconfidence_subset_dprime - mean(highconfidence_subset_dprime)) <= 2 * sd(highconfidence_subset_dprime))
## How many of each are left?
table(contenders$door_or_face)
sort(table(contenders$image_type), decreasing = TRUE)
## This group has a wide range of child endorsement (mean __ endorse child)
summary(contenders$pct_endorsed_child)
## How many of each color door?
contenders %>%
filter(door_or_face == "face") %>%
group_by(type) %>%
summarise(n = n()) %>%
arrange(-n) %>% View()
## Filtering top 11 most child faces per group, using SDN ratings and relative high or low dprime as tiebreakers
face_contenders <- contenders %>%
filter(door_or_face == "face") %>%
group_by(image_type) %>%
top_n(11, pct_endorsed_child) %>% ## NEW
top_n(11, -ISSUES_lookfake) %>% ## NEW
arrange(desc(pct_endorsed_child), ISSUES_SUM) %>%
slice_head(n = 11) %>% ## NEW
ungroup() %>%
arrange(desc(general_dprime)) %>% ## NEW
slice_head(n = 86) %>% ## NEW
slice_tail(n = 84) ## NEW
## Should have 10-11 of each by now
table(face_contenders$image_type)
table(face_contenders$gender)
## Mean child before and after
#contenders %>% ## BEFORE
face_contenders %>% ## AFTER
filter(door_or_face == "face") %>%
group_by(image_type) %>%
summarize(pct_endorsed_child = mean(pct_endorsed_child))
## Very few images now have any endorsement from us about looking fake
table(face_contenders$image_type, face_contenders$ISSUES_lookfake)
## Distribution of memorability scores across genders
for (variable in dprime_list) {
plot <- face_contenders %>%
ggplot(aes(x=!!sym(variable), fill=gender)) +
geom_density(alpha=0.2)+
theme_classic()
print(plot)
}
## Amoung those we kept, did initial age group seem to make a difference
face_contenders %>%
ggplot(aes(x=pct_endorsed_child, fill=age_group)) +
geom_density(alpha=0.2)+
theme_classic()
## Merge back in just our door contenders, and make our "treatment" variable
contenders_facesfinalized <- contenders %>%
filter(door_or_face == "door") %>%
rbind(face_contenders) %>%
mutate(door0_or_face1 = case_when(
door_or_face == "door" ~ 0,
door_or_face == "face" ~ 1,
))
## Make sure this is coded right
table(contenders_facesfinalized$door_or_face, contenders_facesfinalized$door0_or_face1)
## Which types should we match to make sure we have an equal number of each?
## Median of each
contenders_facesfinalized %>%
group_by(gender) %>%
summarize(general_dprime = median(general_dprime),
highconfidence_treshold_dprime = median(highconfidence_treshold_dprime),
highconfidence_subset_dprime = median(highconfidence_subset_dprime))
## Plotting distributions of all memorability
for (variable in dprime_list) {
plot <- contenders_facesfinalized %>%
ggplot(aes(x=!!sym(variable))) +
geom_histogram(binwidth=.19999, color="black", fill="thistle1") +
facet_wrap(vars(gender))+
theme_classic()
print(plot)
}
contenders_facesfinalized_girlsingle <- contenders_facesfinalized %>% filter(gender %in% c("girls", "single"))
contenders_facesfinalized_girldouble <- contenders_facesfinalized %>% filter(gender %in% c("girls", "double"))
contenders_facesfinalized_boysingle <- contenders_facesfinalized %>% filter(gender %in% c("boys", "single"))
contenders_facesfinalized_boydouble <- contenders_facesfinalized %>% filter(gender %in% c("boys", "double"))
## Set up matching
match_object_girlsingle <- matchit(door0_or_face1 ~ general_dprime + highconfidence_treshold_dprime + highconfidence_subset_dprime,
data = contenders_facesfinalized_girlsingle,
#caliper = 0.57, ##NEW, used to be .55
method = "nearest")
## Make new dataframe
matched_data_girlsingle <- match.data(match_object_girlsingle) %>%
arrange(door_or_face, image_type) %>%
mutate(use = "task")
## Should have _ per gender. YAY!!!
table(matched_data_girlsingle$gender)
## Set up matching
match_object_boydouble <- matchit(door0_or_face1 ~ general_dprime + highconfidence_treshold_dprime + highconfidence_subset_dprime,
data = contenders_facesfinalized_boydouble,
#caliper = 0.57,##NEW, used to be .55
method = "nearest")
## Make new dataframe
matched_data_boydouble <- match.data(match_object_boydouble) %>%
arrange(door_or_face, image_type) %>%
mutate(use = "task")
## Should have 42 per gender
table(matched_data_boydouble$gender)
## Binding two matched dataframes together
matched_data_girlsingle_boydouble <- matched_data_girlsingle %>% rbind(matched_data_boydouble)
## What is the overall distance
summary(matched_data_girlsingle_boydouble$distance)
table(matched_data_girlsingle_boydouble$door_or_face, matched_data_girlsingle_boydouble$type)
## General d'
var.test(general_dprime ~ door_or_face, data = matched_data_girlsingle_boydouble, paired = FALSE) #
t.test(general_dprime ~ door_or_face, data = matched_data_girlsingle_boydouble, paired = FALSE, var.equal = TRUE) #
## Threshold high confidence
var.test(highconfidence_treshold_dprime ~ door_or_face, data = matched_data_girlsingle_boydouble, paired = FALSE) #
t.test(highconfidence_treshold_dprime ~ door_or_face, data = matched_data_girlsingle_boydouble, paired = FALSE, var.equal = TRUE) #
## Subset high confidence
var.test(highconfidence_subset_dprime ~ door_or_face, data = matched_data_girlsingle_boydouble, paired = FALSE) #
t.test(highconfidence_subset_dprime ~ door_or_face, data = matched_data_girlsingle_boydouble, paired = FALSE, var.equal = TRUE) #
table(matched_data_girlsingle_boydouble$image_type)
table(matched_data_girlsingle_boydouble$door_or_face)
table(matched_data_girlsingle_boydouble$image_type)
table(matched_data_girlsingle_boydouble$door_or_face)
## Should have _ per gender. YAY!!!
table(matched_data_girlsingle$gender)
View(matched_data_girlsingle)
View(matched_data_boydouble)
## Binding two matched dataframes together
matched_data_girlsingle_boydouble <- matched_data_girlsingle %>% rbind(matched_data_boydouble)
View(matched_data_girlsingle_boydouble)
## What is the overall distance
summary(matched_data_girlsingle_boydouble$distance)
table(matched_data_girlsingle_boydouble$door_or_face, matched_data_girlsingle_boydouble$type)
View(matched_data_girlsingle_boydouble)
#export this as a csv file
write.csv(matched_data_girlsingle_boydouble)
#export this as a csv file
write.csv(x = matched_data_girlsingle_boydouble, file = "matched_data_girlsingle_boydouble.csv")
View(stimuli)
knitr::opts_chunk$set(echo = TRUE)
final_almost<-merge(test,test.two,by="ari$Record.ID")
summary(cars)
rm(list=ls())
library(tidyverse)
library(psycho)
library(dplyr)
library(xfun)
library(dplyr)
ari<-read.csv(file.choose())
#NUMERIC
how.old_agg <- aggregate(ari$How.old.is..child_initials.. ~ ari$Record.ID, data = ari, sum)
score_agg <- aggregate(ari$ARI...Total.Score..Sum. ~ ari$Record.ID, data = ari, sum)
#TEXT BASED
guid_agg <- aggregate( ari$GUID ~ ari$Record.ID, data = ari, function(x) paste(x, collapse = ","))
date_agg <- aggregate( ari$Date.of.Visit ~ ari$Record.ID, data = ari, function(x) paste(x, collapse = ","))
sex_agg <- aggregate(ari$What.is.your.child.s.biological.sex. ~ ari$Record.ID, data = ari, function(x) paste(x, collapse = ","))
#### QUESTIONS
one_agg <- aggregate(ari$I.am.easily.annoyed.by.others ~ ari$Record.ID, data = ari, function(x) paste(x, collapse = ","))
two_agg <-aggregate(ari$I.often.lose.my.temper ~ ari$Record.ID, data = ari, function(x) paste(x, collapse = ","))
three_agg <- aggregate(ari$I.stay.angry.for.a.long.time ~ ari$Record.ID, data = ari, function(x) paste(x, collapse = ","))
four_agg<- aggregate(ari$I.am.angry.most.of.the.time ~ ari$Record.ID, data = ari, function(x) paste(x, collapse = ","))
five_agg<- aggregate(ari$I.get.angry.frequently ~ ari$Record.ID, data = ari, function(x) paste(x, collapse = ","))
six_agg<-aggregate(ari$I.lose.my.temper.easily ~ ari$Record.ID, data = ari, function(x) paste(x, collapse = ","))
seven_agg<- aggregate(ari$Overall..irritability.causes.me.problems ~ ari$Record.ID, data = ari, function(x) paste(x, collapse = ","))
### COMBINE ALL OF THESE
combined_numeric<-merge(how.old_agg,score_agg,by="ari$Record.ID")
combined_one<-merge(guid_agg,date_agg,by="ari$Record.ID")
test<-merge(combined_numeric,combined_one,by="ari$Record.ID")
#######
combined_two<-merge(sex_agg,one_agg,by="ari$Record.ID")
combined_three<-merge(two_agg,three_agg,by="ari$Record.ID")
test.two<-merge(combined_two,combined_three,by="ari$Record.ID")
#######
combined_four<-merge(four_agg,five_agg,by="ari$Record.ID")
combined_five<-merge(six_agg,seven_agg,by="ari$Record.ID")
test.three<-merge(combined_four,combined_five,by="ari$Record.ID")
#####
final_almost<-merge(test,test.two,by="ari$Record.ID")
write.csv(final_almost,"ari_most.csv")
getwd()
write.csv(test.three,"ari_rest.csv")
getwd()
rm(list=ls())
rm(list=ls())
library(tidyverse)
library(psycho)
library(dplyr)
library(xfun)
library(dplyr)
bdi<-read.csv(file.choose())
View(bdi)
#NUMERIC
how.old_agg <- aggregate(bdi$How.old.are.you. ~ bdi$Record.ID, data = bdi, sum)
score_agg <- aggregate(bdi$BDI.II.Depression.Score..sum. ~ bdi$Record.ID, data = bdi, sum)
guid_agg <- aggregate( bdi$GUID ~ bdi$Record.ID, data = bdi, function(x) paste(x, collapse = ","))
date_agg <- aggregate( bdi$Date.of.Visit ~ bdi$Record.ID, data = bdi, function(x) paste(x, collapse = ","))
questions_agg<-aggregate(bdi$X1..Sadness,bdi$X2..Pessimism ~ bdi$Record.ID, data = bdi,function(x) paste(x, collapse = ","))
questions_agg<-aggregate(6:26 ~ bdi$Record.ID, data = bdi,function(x) paste(x, collapse = ","))
View(date_agg)
library(tidyverse)
library(psycho)
library(dplyr)
library(xfun)
library(dplyr)
#NUMERIC
how.old_agg <- aggregate(bdi$How.old.are.you. ~ bdi$Record.ID, data = bdi, sum)
score_agg <- aggregate(bdi$BDI.II.Depression.Score..sum. ~ bdi$Record.ID, data = bdi, sum)
guid_agg <- aggregate( bdi$GUID ~ bdi$Record.ID, data = bdi, function(x) paste(x, collapse = ","))
date_agg <- aggregate( bdi$Date.of.Visit ~ bdi$Record.ID, data = bdi, function(x) paste(x, collapse = ","))
View(bdi)
practice <- full_join(bdi$X1..Sadness, bdi$X2..Pessimism, by = "ID") %>%
arrange(bdi$Record.ID)
View(bdi)
library(dplyr)
# Aggregate rows based on "recordID"
df_aggregated <- bdi %>%
group_by(Record.ID) %>%         # Group by the unique ID
summarize(across(2:26, sum, na.rm = TRUE)) # Aggregate columns 2 to 26 by summing
# Aggregate rows based on "recordID"
df_aggregated <- bdi %>%
group_by(Record.ID) %>%         # Group by the unique ID
summarize(across(6:26, sum, na.rm = TRUE)) # Aggregate columns 2 to 26 by summing
# Aggregate rows based on "recordID"
df_aggregated <- bdi %>%
group_by(Record.ID) %>%         # Group by the unique ID
summarize(across(6:26, sum, na.rm = TRUE)) # Aggregate columns 6 to 26 by summing
rm(list=ls())
library(dplyr)
bdi<-read.csv(file.choose())
#NUMERIC
how.old_agg <- aggregate(bdi$How.old.are.you. ~ bdi$Record.ID, data = bdi, sum)
score_agg <- aggregate(bdi$BDI.II.Depression.Score..sum. ~ bdi$Record.ID, data = bdi, sum)
#TEXT BASED
guid_agg <- aggregate( bdi$GUID ~ bdi$Record.ID, data = bdi, function(x) paste(x, collapse = ","))
date_agg <- aggregate( bdi$Date.of.Visit ~ bdi$Record.ID, data = bdi, function(x) paste(x, collapse = ","))
#sex_agg <- aggregate(ari$What.is.your.child.s.biological.sex. ~ ari$Record.ID, data = ari, function(x) paste(x, collapse = ","))
# Aggregate rows based on "recordID"
df_aggregated <- bdi %>%
group_by(Record.ID) %>%         # Group by the unique ID
summarize(across(6:26, sum, na.rm = TRUE)) # Aggregate columns 6 to 26 by summing
# Aggregate rows based on "recordID"
df_aggregated <- bdi %>%
aggregate(Record.ID) %>%         # Group by the unique ID
summarize(across(6:26, sum, na.rm = TRUE)) # Aggregate columns 6 to 26 by summing
# Aggregate rows based on "recordID"
df_aggregated <- bdi %>%
aggregate(Record.ID) %>%         # Group by the unique ID
summarize(across(6:26, sum = FUN, na.rm = TRUE)) # Aggregate columns 6 to 26 by summing
# Aggregate rows based on "recordID"
df_aggregated <- bdi %>%
aggregate(Record.ID) %>%         # Group by the unique ID
summarize(across(6:26, sum = FUN, na.rm = TRUE)) # Aggregate columns 6 to 26 by summing
# Aggregate rows based on "recordID"
df_aggregated <- bdi %>%
aggregate(Record.ID) %>%         # Group by the unique ID
summarize(across(6:26, sum = FUN, na.rm = TRUE)) # Aggregate columns 6 to 26 by summing
# Aggregate rows based on "recordID"
df_aggregated <- bdi %>%
aggregate(Record.ID) %>%         # Group by the unique ID
summarize(across(6:26, sum = FUN, na.rm = TRUE)) # Aggregate columns 6 to 26 by summing
df_aggregated <- bdi %>%
group_by(Record.ID) %>%
summarize(across(6:26, sum, na.rm = TRUE), .groups = "drop")
df_aggregated <- bdi %>%
group_by(Record.ID) %>%
summarize(across(6:26, ~ first(.), .names = "agg_{.col}"))
View(df_aggregated)
df_aggregated <- aggregate(. ~ Record.ID, data = bdi, FUN = function(x) paste(unique(x), collapse = ", "), subset = 6:26)
View(df_aggregated)
df_aggregated <- aggregate(. ~ Record.ID, data = bdi, FUN = function(x) paste(unique(x), collapse = ", ")
View(df_aggregated)
View(df_aggregated)
df_aggregated <- aggregate(. ~ Record.ID, data = bdi, FUN = function(x) paste(x, collapse = ", "), subset = 6:26)
View(df_aggregated)
again <- aggregate(. ~ Record.ID, data = bdi, FUN = function(x) paste(x, collapse = ", "), subset = 6:26)
View(again)
ugh <- aggregate(. ~ Record.ID, data = bdi, FUN = function(x) paste(x, collapse = ", ")
ugh <- aggregate(. ~ Record.ID, data = bdi, FUN = function(x) paste(x, collapse = ", ")
View(again)
ugh <- aggregate(. ~ Record.ID, data = bdi, FUN = function(x) paste(x, collapse = ", ")
ugh <- aggregate(. ~ Record.ID, data = bdi, FUN = function(x) paste(x, collapse = ", ")
ugh <- aggregate(. ~ Record.ID, data = bdi, FUN = function(x) paste(x, collapse = ", ")
hm <- aggregate(. ~ Record.ID, data = bdi, FUN = function(x) paste(x, collapse = ", ")
hm <- aggregate(. ~ Record.ID, data = bdi, FUN = function(x) paste(x, collapse = ", "))
View(hm)
combined_numeric<-merge(how.old_agg,score_agg,by="bdi$Record.ID")
test<-merge(combined_numeric,hm,by="ari$Record.ID")
test<-merge(combined_numeric,hm,by="Record.ID")
write.csv(hm,"bdi_most.csv")
getwd()
View(combined_numeric)
write.csv(combined_numeric,"bdi_rest.csv")
getwd()
combined_one<-merge(guid_agg,date_agg,by="bdi$Record.ID")
combined_numeric<-merge(how.old_agg,score_agg,by="ari$Record.ID")
combined_numeric<-merge(how.old_agg,score_agg,by="bdi$Record.ID")
test<-merge(combined_numeric,combined_one,by="bdi$Record.ID")
getwd()
getwd()
write.csv(test.pls,"bdi_rest.csv")
write.csv(test.pls,"bdi_rest.csv")
test.pls <-merge(combined_numeric,combined_one,by="bdi$Record.ID")
getwd()
getwd()
write.csv(test.pls,"BDI.csv")
getwd()
rm(list=ls())
library(tidyverse)
library(psycho)
library(dplyr)
library(xfun)
library(dplyr)
bdi<-read.csv(file.choose())
rm(list=ls())
bfnes<-read.csv(file.choose())
bfne<-read.csv(file.choose())
View(bfne)
library(dplyr)
bfne<-read.csv(file.choose())
View(bfne)
hm <- aggregate(. ~ Record.ID, data = bfne, FUN = function(x) paste(x, collapse = ", "))
how.old_agg <- aggregate(bfne$How.old.is..child_initials.. ~ bfne$Record.ID, data = bfne, sum)
score_agg <- aggregate(bfne$Total.Score.of.Brief.Fear.of.Negative.Evaluation ~ bfne$Record.ID, data = bfne, sum)
combined_numeric<-merge(how.old_agg,score_agg,by="bdi$Record.ID")
combined_numeric<-merge(how.old_agg,score_agg,by="bfne$Record.ID")
View(combined_numeric)
guid_agg <- aggregate(bfne$GUID ~ bfne$Record.ID, data = bfne, function(x) paste(x, collapse = ","))
date_agg <- aggregate(bfne$Date.of.Visit ~ bfne$Record.ID, data = bfne, function(x) paste(x, collapse = ","))
combined_text <-merge(guid_agg,date_agg, by = "bfne$Record.ID")
part.one<-merge(combined_text,combined_numeric,by="bfne$Record.ID")
View(part.one)
hm <- aggregate(. ~ Record.ID, data = bfne, FUN = function(x) paste(x, collapse = ", "))
library(tidyverse)
library(psycho)
library(dplyr)
library(xfun)
library(dplyr)
hm <- aggregate(. ~ Record.ID, data = bfne, FUN = function(x) paste(x, collapse = ", "))
hm <- aggregate(. ~ Record.ID, data = bfne, FUN = function(x) paste(x, collapse = ", "))
sex_agg <- aggregate(bfne$What.is.your.child.s.biological.sex. ~ bfne$Record.ID, data = bfne, function(x) paste(x, collapse = ","))
part.oe<-merge(combined_text,combined_numeric,by="bfne$Record.ID")
short.part<-merge(part.oe,sex_agg, by="bfne$Record.ID")
View(short.part)
write.csv(short.part,"bfne_some.csv")
hm <- aggregate(. ~ Record.ID, data = bfne, FUN = function(x) paste(x, collapse = ", "))
hm <- aggregate(. ~ bfne$Record.ID, data = bfne, FUN = function(x) paste(x, collapse = ", "))
hm <- aggregate( ~ bfne$Record.ID, data = bfne, FUN = function(x) paste(x, collapse = ", "))
hm <- aggregate( ~ bfne$Record.ID, data = bfne, FUN = function(x) paste(x, collapse = ", "))
hm <- aggregate(. ~ bfne$Record.ID, data = bfne, FUN = function(x) paste(x, collapse = ", "))
final_bfne <- aggregate(. ~ Record.ID, data = bfne, FUN = function(x) paste(unique(x), collapse = ", "), subset = 4:17)
final_bfne <- aggregate(. ~ Record.ID, data = bfne, FUN = function(x) paste(unique(x), collapse = ", "), subset = 4:17)
final_bfne <- aggregate(. ~ Record.ID, data = bfne, FUN = function(x) paste(unique(x), collapse = ", "), subset = 4:17)
df_aggregated <- bfne %>%
group_by(Record.ID) %>%
summarize(across(6:17, ~ paste(unique(.), collapse = ", "), .names = "agg_{.col}"))
View(df_aggregated)
getwd()
write.csv(df_aggregated,"bfne_most.csv")
getwd()
df_aggregated <- bfne %>%
group_by(Record.ID) %>%
summarize(across(2:18, ~ paste(unique(.), collapse = ", "), .names = "agg_{.col}"))
df_aggregated <- bfne %>%
group_by(Record.ID) %>%
summarize(across(2:17, ~ paste(unique(.), collapse = ", "), .names = "agg_{.col}"))
View(df_aggregated)
write.csv(df_aggregated,"bfne_all.csv")
getwd()
View(bfne)
View(date_agg)
View(df_aggregated)
df_aggregated <- bfne %>%
group_by(Record.ID) %>%
summarize(across(1:17, ~ paste(unique(.), collapse = ", "), .names = "agg_{.col}"))
getwd()
write.csv(df_aggregated,"bfne_all.csv")
getwd()
rm(list=ls())
library(dplyr)
